#!/usr/bin/python

import rospy
import cv2
import sys
import numpy as np
from donkeycar.parts.camera import Webcam
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError 
import time

# class BaseCamera:

#     def run_threaded(self):
#         return self.frame

class Image_Publisher():

    def __init__(self):
        rospy.init_node('image_publisher_node', anonymous=True)

        self.on = False
        self.pub = rospy.Publisher('/camera_image',Image,queue_size=10)
        self.cam = Webcam()

    def image_pub(self):
        rate = rospy.Rate(10)
        while not rospy.is_shutdown():
            images = self.cam.run_threaded()
            self.pub.publish(images)

        

    def shutdown(self):
        # indicate that the thread should be stopped
        self.on = False
        print('stoping Webcam')
        time.sleep(.5)    

    # def main(self):

    #     vc = cv2.VideoCapture(0)
        
    #     if vc.isOpened(): 
    #         rval, frame = vc.read()
    #     else:
    #         print("Error opening resource: " + str(resource))
    #         rval = False

    #     while rval:
    #         rval, frame = vc.read()

    #         self.pub.publish(frame)

    #         key = cv2.waitKey(20)
            
    #         if key == 27:  # exit on ESC
    #             shutdown()
    #             break 



        # rospy.init_node('image_publisher', anonymous=True)

        # pub = rospy.Publisher('camera_image', Image, queue_size=100)
        
        # print "Trying to open resource: /dev/video0 "
        # cap = cv2.VideoCapture("/dev/video0")
        # if not cap.isOpened():
        #     print "Error opening resource: " + str(resource)
        #     print "Maybe opencv VideoCapture can't open it"
        #     exit(0)


        # print "Correctly opened resource, starting to show feed."
        # rval, frame = cap.read()
        # while rval:
            
        #     rval, frame = cap.read()

        #     # ROS image stuff
        #     if frame is not None:
        #         frame = np.uint8(frame)
        #         image_message = bridge.cv2_to_imgmsg(frame, encoding="brg8")
        #     pub.publish(image_message)

        #     key = cv2.waitKey(1)
            
        # # cv2.destroyAllWindows()

    
if __name__ == '__main__':
    pub_obj = Image_Publisher()

    try:
        pub_obj.image_pub()
    except rospy.ROSInterruptException:
        pass
    rospy.spin()
